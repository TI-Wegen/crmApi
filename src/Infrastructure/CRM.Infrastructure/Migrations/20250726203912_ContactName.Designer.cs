// <auto-generated />
using System;
using CRM.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CRM.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250726203912_ContactName")]
    partial class ContactName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Agents.Domain.Aggregates.Agente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("uuid");

                    b.Property<string>("_setorIds")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("SetorIds");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Agentes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "sistema@crm.local",
                            Nome = "Sistema",
                            PasswordHash = "$2a$11$fH.d2sB7aY.s.1b2a3c4d5e6f7g8h9i0j",
                            Status = "Offline",
                            Version = new Guid("00000000-0000-0000-0000-000000000001"),
                            _setorIds = ""
                        });
                });

            modelBuilder.Entity("Agents.Domain.Aggregates.Setor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Nome")
                        .IsUnique();

                    b.ToTable("Setores", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0001-000000000001"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Descricao = "Setor responsável por questões financeiras e boletos.",
                            Nome = "Financeiro",
                            Version = new Guid("f6b3a2a8-8e6a-4b2a-8b8d-9b8e1f0c3b1a")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0001-000000000002"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Descricao = "Setor responsável por vendas e novas oportunidades.",
                            Nome = "Comercial",
                            Version = new Guid("d4a3b4d5-6e7f-8a9b-0c1d-2e3f4a5b6c7d")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0001-000000000003"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Descricao = "Setor responsável pela administração geral",
                            Nome = "Administração",
                            Version = new Guid("d4a3b4d5-6e7f-8a9b-0c1d-2e3f4a5b6c7a")
                        });
                });

            modelBuilder.Entity("Contacts.Domain.Aggregates.Contato", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid");

                    b.Property<string>("WaId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Telefone")
                        .IsUnique();

                    b.HasIndex("WaId")
                        .IsUnique();

                    b.ToTable("Contatos", (string)null);
                });

            modelBuilder.Entity("Contacts.Domain.Entities.HistoricoStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ContatoId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataDeAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ContatoId");

                    b.ToTable("HistoricoStatus");
                });

            modelBuilder.Entity("Conversations.Domain.Aggregates.Atendimento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AgenteId")
                        .HasColumnType("uuid");

                    b.Property<string>("BotStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ConversaId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataFinalizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataFinalizacao");

                    b.Property<Guid?>("SetorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ConversaId");

                    b.ToTable("Atendimentos", (string)null);
                });

            modelBuilder.Entity("Conversations.Domain.Aggregates.Conversa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContatoId")
                        .HasColumnType("uuid");

                    b.Property<string>("ContatoNome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TotalSessoesIniciadas")
                        .HasColumnType("integer");

                    b.Property<Guid>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Conversas", (string)null);
                });

            modelBuilder.Entity("Conversations.Domain.Entities.Mensagem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AnexoUrl")
                        .HasColumnType("text");

                    b.Property<Guid>("AtendimentoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConversaId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MessageId")
                        .HasColumnType("text")
                        .HasColumnName("MessageId");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ConversaId");

                    b.ToTable("Mensagens", (string)null);
                });

            modelBuilder.Entity("Metrics.Domain.Entities.MetricaTemplateEnviado", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AgenteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AtendimentoId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("MetricasTemplatesEnviados", (string)null);
                });

            modelBuilder.Entity("Templates.Domain.Aggregates.MessageTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("MotivoRejeicao")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MessageTemplates", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0009-000000000001"),
                            Body = "Olá {{1}}, Tudo bem?",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Template de boas-vindas para novos usuários.",
                            Language = "pt_BR",
                            Name = "template",
                            Status = 1,
                            Version = new Guid("f6b3a2a8-8e6a-4b2a-8b8d-9b8e1f0c3b1a")
                        });
                });

            modelBuilder.Entity("Agents.Domain.Aggregates.Agente", b =>
                {
                    b.OwnsOne("CargaDeTrabalho", "CargaDeTrabalho", b1 =>
                        {
                            b1.Property<Guid>("AgenteId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Valor")
                                .HasColumnType("integer")
                                .HasColumnName("CargaDeTrabalho");

                            b1.HasKey("AgenteId");

                            b1.ToTable("Agentes");

                            b1.WithOwner()
                                .HasForeignKey("AgenteId");

                            b1.HasData(
                                new
                                {
                                    AgenteId = new Guid("00000000-0000-0000-0000-000000000001"),
                                    Valor = 0
                                });
                        });

                    b.Navigation("CargaDeTrabalho")
                        .IsRequired();
                });

            modelBuilder.Entity("Contacts.Domain.Aggregates.Contato", b =>
                {
                    b.OwnsMany("Contacts.Domain.ValueObjects.Tag", "Tags", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("ContatoId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Texto")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.HasKey("Id");

                            b1.HasIndex("ContatoId");

                            b1.ToTable("ContatoTags", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ContatoId");
                        });

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Contacts.Domain.Entities.HistoricoStatus", b =>
                {
                    b.HasOne("Contacts.Domain.Aggregates.Contato", null)
                        .WithMany("HistoricoStatus")
                        .HasForeignKey("ContatoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Conversations.Domain.Aggregates.Atendimento", b =>
                {
                    b.HasOne("Conversations.Domain.Aggregates.Conversa", null)
                        .WithMany()
                        .HasForeignKey("ConversaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Conversations.Domain.ValueObjects.Avaliacao", "Avaliacao", b1 =>
                        {
                            b1.Property<Guid>("AtendimentoId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Comentario")
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("AvaliacaoComentario");

                            b1.Property<int>("Nota")
                                .HasColumnType("integer")
                                .HasColumnName("AvaliacaoNota");

                            b1.HasKey("AtendimentoId");

                            b1.ToTable("Atendimentos");

                            b1.WithOwner()
                                .HasForeignKey("AtendimentoId");
                        });

                    b.Navigation("Avaliacao");
                });

            modelBuilder.Entity("Conversations.Domain.Aggregates.Conversa", b =>
                {
                    b.OwnsOne("Conversations.Domain.ValueObjects.SessaoWhatsapp", "SessaoAtiva", b1 =>
                        {
                            b1.Property<Guid>("ConversaId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("DataFim")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("SessaoFim");

                            b1.Property<DateTime>("DataInicio")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("SessaoInicio");

                            b1.HasKey("ConversaId");

                            b1.ToTable("Conversas");

                            b1.WithOwner()
                                .HasForeignKey("ConversaId");
                        });

                    b.Navigation("SessaoAtiva");
                });

            modelBuilder.Entity("Conversations.Domain.Entities.Mensagem", b =>
                {
                    b.HasOne("Conversations.Domain.Aggregates.Conversa", null)
                        .WithMany("Mensagens")
                        .HasForeignKey("ConversaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Conversations.Domain.ValueObjects.Remetente", "Remetente", b1 =>
                        {
                            b1.Property<Guid>("MensagemId")
                                .HasColumnType("uuid");

                            b1.Property<Guid?>("AgenteId")
                                .HasColumnType("uuid")
                                .HasColumnName("RemetenteAgenteId");

                            b1.Property<string>("Tipo")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("RemetenteTipo");

                            b1.HasKey("MensagemId");

                            b1.ToTable("Mensagens");

                            b1.WithOwner()
                                .HasForeignKey("MensagemId");
                        });

                    b.Navigation("Remetente")
                        .IsRequired();
                });

            modelBuilder.Entity("Contacts.Domain.Aggregates.Contato", b =>
                {
                    b.Navigation("HistoricoStatus");
                });

            modelBuilder.Entity("Conversations.Domain.Aggregates.Conversa", b =>
                {
                    b.Navigation("Mensagens");
                });
#pragma warning restore 612, 618
        }
    }
}
